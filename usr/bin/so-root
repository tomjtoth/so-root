#!/bin/bash


# required for development
case "$1" in
  *qcow2 )
    case "$2" in
      mount )
        sudo modprobe nbd max_part=16
        sudo qemu-nbd -c /dev/nbd0 "$1"
        sudo partprobe /dev/nbd0
        sudo mount /dev/nbd0p2 /mnt
        sudo mount /dev/nbd0p1 /mnt/boot
      ;;
      
      update )
        sudo cp -a ~/soft-hard-ware/linux/bin-private/projects/so-root/* /mnt
        #sudo arch-chroot /mnt /bin/bash -c "mkinitcpio -P && exit" #this one actually makes the image unbootable for some reason...
      ;;
      
      umount )
        sudo umount /mnt/boot
        sudo umount /mnt
        sudo qemu-nbd -d /dev/nbd0
      ;;
      
      qemu )
        #GPU="-vga virtio"
        #GPU="-vga virtio -display gtk,gl=on"
        GPU="-vga virtio -display gtk,gl=on vga=0x305"
        #MOUSE="-usb -device usb-tablet -show-cursor"
        #CDROM="-cdrom /home/downloads/archlinux-2020.10.01-x86_64.iso -boot order=d"
        qemu-system-x86_64 -enable-kvm -cpu host -m 4G -hda "$1" $CDROM $GPU
      ;;
    esac
    exit 0
  ;;
  
  *conf )
    [ -f "$1" ] && config_file="$1"
  ;;
esac


# if run during boot
[ -f /init ] && [ -d /new_root ] && EARLY_USERSPACE=/new_root && PATH="/new_root/usr/bin:$PATH" && export LD_LIBRARY_PATH="/new_root/usr/lib"
config_file=/etc/so-root.conf


# getting config
source $EARLY_USERSPACE$config_file
source $EARLY_USERSPACE/usr/lib/so-root/*
DIR_IMAGES=$EARLY_USERSPACE$DIR_IMAGES
DIR_MOUNTS=$EARLY_USERSPACE$DIR_MOUNTS
DIR_DESTINATION=$EARLY_USERSPACE$DIR_DESTINATION


check_available_RAM() {
  # values in kB except min_system_RAM
  available_ram=$(free | grep -P 'Mem' | awk '{print $7}')
  size_of_images=$(du -s $DIR_IMAGES | awk '{print $1}')
  if [ "$(( $zram_size + $size_of_images * 2 + $min_system_RAM * 1024 ))" -lt "$available_ram" ]; then
    echo -n "do you want to copy all the images to RAM? [y/N] "
    read answer #</dev/tty
    case "$answer" in
      y|Y*)
        if ! [[ $(mount /new_root 2>/dev/null | awk '{print $1}') == *zram* ]]; then
          # create zram to catch changes made to folders
          insert_module zram lz4 ext4
          zram_device=$(zramctl -f -s $(( $zram_size * 1024 * 1024 )) -a lz4)
          DIR_MOUNTS_ZRAM=/.zram
          mkfs.ext4 -q $zram_device
          create_dir "$DIR_MOUNTS/.zram"
          mount $zram_device "$DIR_MOUNTS/.zram"
        fi
        
        # create tmpfs for already compressed images
        create_dir "$DIR_MOUNTS/.tmpfs"
        size_of_images=$(( $(( $size_of_images + 5 * 1024 )) * 1024 ))
        mount -t tmpfs tmpfs -o size=$size_of_images "$DIR_MOUNTS/.tmpfs"
        cp $DIR_IMAGES/* $DIR_MOUNTS/.tmpfs
        DIR_IMAGES="$DIR_MOUNTS/.tmpfs"
      ;;
    esac
  fi
}


create_dir() {
  [ -d "$1" ] && rm -rf "$1"
  mkdir -p "$1"
}


insert_module() {
  for module in $@; do
    echo "inserting kernel module now: $module"
    if [ ! $(lsmod | grep -q $module) ]; then
      insmod $(find /new_root/usr/lib/modules/$(uname -r) -name ${module}'.ko.xz') 2>/dev/null
    fi
  done
}


mount_images() {
  # renaming images if necessary
  if [ -f "$DIR_IMAGES/.images_to_rename" ]; then
    for line in $(cat "$DIR_IMAGES/.images_to_rename"); do
      SRC=$(echo $line | grep -Po '^.+(?=\.{10})')
      DST=$(echo $line | grep -Po '(?<=\.{10}).+$')
      if [ -f "$SRC" ] && [ ! -e "$DST" ]; then
        mv "$EARLY_USERSPACE$SRC" "$EARLY_USERSPACE$DST"
      fi
    done
    rm "$DIR_IMAGES/.images_to_rename"
  fi
  
  for image in $(ls "$DIR_IMAGES" | grep -P 'sfs'); do
    if ! $(mountpoint -q "$DIR_MOUNTS/${image%.sfs}"); then 
      
      # skipping checking the seed if it's blacklisted
      if [ -n "$seeds_blacklisted" ]; then
        for (( i=0; i<${#seeds_blacklisted[@]}; i++ )); do
          if $(echo $image | grep -Pq ${seeds_blacklisted[$i]}); then
            continue 2
          fi
        done
      fi
      
      # checking for multiple seeds of this image
      if $(echo $image | grep -Pq '(?<=-)0+\.sfs'); then
        seeds_available=($(ls "$DIR_IMAGES" | grep -Po "${image%%-*.sfs}"'.+0+\.sfs'))
        if [ "${#seeds_available[@]}" -gt 1 ]; then
          echo -e "${image%%-*.sfs} has multiple seeds as seen below\nchoose one branch to load:\n"
          for (( i=0; i<${#seeds_available[@]}; i++ )); do
            echo "$i - ${seeds_available[$i]} - created at: $(stat $DIR_IMAGES/${seeds_available[$i]} | grep -Po '(?<=Birth: ).+')"
          done
          # choosing the branch of seed to use
          while [ : ]; do
            read seed #</dev/tty
            regex='^[0-9]+$'
            # defaulting to the last one
            [ -z $seed ] && seed=$(( ${#seeds_available[@]} - 1 ))
            if ! [[ $seed =~ $regex ]] || [ "$seed" -lt 0 ] || [ "$seed" -gt "$(( ${#seeds_available[@]} - 1 ))" ] ; then
              echo "not a valid choice"
            else
              # blacklist all images containing the non-selected seeds
              for (( i=0; i<${#seeds_available[@]}; i++ )); do
                [ "$i" -eq "$seed" ] && continue
                seeds_blacklisted+=($(echo "${seeds_available[$i]}" | grep -Po '.+(?=-\d+\.sfs)'))
                #echo "### these are the currently blacklisted seeds: ${seeds_blacklisted[@]}"
                image=${seeds_available[$seed]}
                #echo $image
              done
              break
            fi
          done
        fi
      fi
      
      create_dir "$DIR_MOUNTS/${image%.sfs}"
      insert_module loop squashfs
      mount -t squashfs -o loop,ro "$DIR_IMAGES/$image" "$DIR_MOUNTS/${image%.sfs}"
      if [ $? -ne 0 ]; then
        echo "error handling should come here"
      fi
    fi
  done
  unset seeds_blacklisted
}


mount_overlays() {
  for mount in $(ls "$DIR_MOUNTS" | grep -P '\w+-\d+-0+'); do
    create_dir "$DIR_MOUNTS$DIR_MOUNTS_ZRAM/${mount%%-*}-work"
    create_dir "$DIR_MOUNTS$DIR_MOUNTS_ZRAM/${mount%%-*}-upper"
    create_dir "$DIR_DESTINATION/${mount%%-*}"
    if ! $(mountpoint -q "$DIR_DESTINATION/${mount%%-*}"); then 
      lowers=$(ls "$DIR_MOUNTS" | grep -P ${mount%%-*}'(-\d+)+$' | sort -r | xargs | sed 's, ,'":$DIR_MOUNTS/"',g')
      insert_module overlay
      mount -t overlay overlay -o lowerdir=$DIR_MOUNTS/$lowers,upperdir=$DIR_MOUNTS$DIR_MOUNTS_ZRAM/${mount%%-*}-upper,workdir=$DIR_MOUNTS$DIR_MOUNTS_ZRAM/${mount%%-*}-work $DIR_DESTINATION/${mount%%-*}
      if [ $? -ne 0 ]; then
        echo "error handling should come here"
      fi
    fi
  done
}


umount_images() {
  for mount in $(df | grep -Po '^/dev/loop.+'"$DIR_MOUNTS"'\K.+$'); do
    if $(mountpoint -q "$DIR_MOUNTS/$mount"); then 
      umount "$DIR_MOUNTS/$mount"
      if [ $? -ne 0 ]; then
        echo "error handling should come here"
      fi
    fi
  done
}


umount_overlays() {
  for mount in $(df | grep -Po '^overlay.+'"$DIR_DESTINATION"'/\K.+$'); do
    #if [ $(ls -A "$DIR_MOUNTS/${mount}-upper") ]; then
      echo -e "you have unsaved changes in $mount\nyou can:\n - create a new Incremental image\n - or Seed image\n - or Delete the changes\n\nwhat will it be? [i/s/D]"
      read saving #</dev/tty
      case "$saving" in
        [iI]* )
          echo -e "\n### creating an Incremental image\n"
          create_new_image "$DIR_MOUNTS/${mount}-upper"
        ;;
        
        [sSrR]* )
          echo -e "\n### creating a Seed image\n"
          create_new_image "$DIR_DESTINATION/$mount"
        ;;
        
        *)
          echo -e "\n### proceeding without creating a new image\n"
        ;;
      esac
    #fi
    umount "$DIR_DESTINATION/$mount"
    if [ $? -ne 0 ]; then
      echo "error handling should come here"
    fi
    #[ -d "$DIR_DESTINATION/$mount" ] && rm -rf "$DIR_DESTINATION/$mount"
    [ -d "$DIR_MOUNTS/${mount}-upper" ] && rm -rf "$DIR_MOUNTS/${mount}-upper)"
    [ -d "$DIR_MOUNTS/${mount}-work" ] && rm -rf "$DIR_MOUNTS/${mount}-work"
  done
}


create_new_image() {
  required_space=$(( $(du -s "$1" | grep -Po '^\d+') / 2 ))
  [ ! -d "$DIR_MOUNTS/persistent" ] && mkdir -p "$DIR_MOUNTS/persistent"
  if ! $(mountpoint -q "$DIR_MOUNTS/persistent"); then
    echo 'mount $DEV_PERSISTENT $DIR_MOUNTS/persistent' #still testing
  fi
  [ ! -d "$DIR_MOUNTS/persistent/${DIR_IMAGES##*/}" ] && mkdir -p "$DIR_MOUNTS/persistent/${DIR_IMAGES##*/}"
  free_space=$(df "$DIR_MOUNTS/persistent" | tail -n 1 | awk '{print $4}')
  echo -e "required space: ${required_space}\nfree space: $free_space"
  if [ "$free_space" -le "$required_space" ]; then
    echo -e "there is not enough space to create an image of $1\ndeleting the changes"
    return
  fi
  LAST_ITERATION=$(ls $DIR_IMAGES | grep -Po $mount'-\K\d+-\d+(?=\.sfs)' | tail -n 1)
  CURRENT_ITERATION=$(ls $DIR_MOUNTS | grep -Po $mount'-\K\d+-\d+' | tail -n 1)
  if [[ "$1" == *upper ]]; then
    OLD_X=${CURRENT_ITERATION%%-*}
    OLD_Y=${CURRENT_ITERATION##*-}
    NEW_X=$OLD_X
    NEW_Y=$(( $OLD_Y + 1))
  else
    OLD_X=${LAST_ITERATION%%-*}
    OLD_Y=${LAST_ITERATION##*-}
    NEW_X=$(( $OLD_X +1 ))
    NEW_Y=0
  fi
  NEW_ITERATION=$NEW_X-$NEW_Y
  
  #new seed
  if [ ${#NEW_X} -gt ${#OLD_X} ]; then
    for image in $(ls $DIR_IMAGES | grep -P $mount'(-\d+){2}'); do
      echo "$DIR_IMAGES/$image..........$DIR_IMAGES/$(echo $image | grep -Po '.+(?=\d+-\d+\.sfs)')0$(echo $image | grep -Po '\d+-\d+\.sfs')" >> "$DIR_MOUNTS/persistent/${DIR_IMAGES##*/}/.images_to_rename"
    done
  fi
  
  #new increment
  if [ ${#NEW_Y} -gt ${#OLD_Y} ]; then
    for image in $(ls $DIR_IMAGES | grep -P $mount'(-\d+){2}'); do
      echo "$DIR_IMAGES/$image..........$DIR_IMAGES/$(echo $image | grep -Po '.+(?=\d+\.sfs)')0$(echo $image | grep -Po '\d+\.sfs')" >> "$DIR_MOUNTS/persistent/${DIR_IMAGES##*/}/.images_to_rename"
    done
  fi
  mksquashfs $1 $DIR_MOUNTS/persistent/${DIR_IMAGES##*/}/${mount}-${NEW_ITERATION}.sfs $SQUASH_FLAGS
  if [ $? -ne 0 ]; then 
    echo "error handling should come here"
  fi
}


# if run during boot
[ -n $EARLY_USERSPACE ] && check_available_RAM && mount_images && mount_overlays

