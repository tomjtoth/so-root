#!/bin/bash


# parsing command line parameters
CONFIG=/etc/so-root.conf
while [ "$#" -gt "0" ]; do
  case "$1" in
    -c|--config)
      if [ -f "$2" ]; then
        CONFIG="$2"
      else
        echo "$2 is not a file, not sourcing it"
      fi
      shift 2
    ;;
    
    -q|--qemu)
      CONFIG=~/soft-hard-ware/linux/bin-private/projects/so-root/etc/so-root.conf
      case "$2" in
        mount|umount|update)
          QEMU="$2"
          shift
        ;;
      esac
      [ -z "$QEMU" ] && QEMU="run"
      shift
    ;;
    
    -v|--verbosity)
      case "$2" in
        [1-5])
          verbosity="$2"
          shift
        ;;
      esac
      shift
    ;;
    
    --unload|--load|--save|--enable)
      MODE="${1#--}"
      shift
    ;;
    
    *)
      echo -e "unknown flag: $1\nskipping this one"
      shift
    ;;
  esac
done


# if running in early userspace
[ -f /init ] && [ -d /new_root ] && EARLY_USERSPACE=/new_root #&& PATH="/new_root/usr/bin:$PATH" && export LD_LIBRARY_PATH="/new_root/usr/lib"
for file in $(ls /usr/lib/so-root/); do
  source /usr/lib/so-root/$file
done
source $CONFIG
DIR_IMAGES=$EARLY_USERSPACE$DIR_IMAGES
DIR_MOUNTS=$EARLY_USERSPACE$DIR_MOUNTS
DIR_DESTINATION=$EARLY_USERSPACE$DIR_DESTINATION


# qemu is required for testing changes made to the script
[ -z "$QEMU_IMG" ] && QEMU_IMG=~/VMs/arch.qcow2
case "$QEMU" in
  mount)
    sudo modprobe nbd max_part=16
    sudo qemu-nbd -c /dev/nbd0 "$QEMU_IMG"
    sudo partprobe /dev/nbd0
    sudo mount /dev/nbd0p2 /mnt
    sudo mount /dev/nbd0p1 /mnt/boot
  ;;
  
  update)
    sudo cp -a ~/soft-hard-ware/linux/bin-private/projects/so-root/* /mnt
  ;;
  
  umount)
    sudo umount /mnt/boot
    sudo umount /mnt
    sudo qemu-nbd -d /dev/nbd0
  ;;
  
  run)
    GPU="-vga virtio"
    #GPU="-vga virtio -display gtk,gl=on"
    #GPU="-vga virtio -display gtk,gl=on vga=0x305"
    #MOUSE="-usb -device usb-tablet -show-cursor"
    #CDROM="-cdrom /home/downloads/archlinux-2020.10.01-x86_64.iso -boot order=d"
    qemu-system-x86_64 -enable-kvm -cpu host -m 4G -hda "$QEMU_IMG" $CDROM $GPU
  ;;
esac
[ -n "$QEMU" ] && exit 0


case "$MODE" in
  load)
    create_dir "$DIR_MOUNTS" "delete"
    [ -n "$EARLY_USERSPACE" ] && check_available_RAM
    mount_images
    mount_overlays
  ;;
  
  unload)
    umount_overlays
    umount_images
  ;;
  
  save)
    save_changes
  ;;
  
  enable)
    echo -e "\n### you should include so-root in the HOOKS probably before fsck\n"
    create_initial_images
  ;;
esac

